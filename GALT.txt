macro "GALT [a]" {

	// append function
	function append(arr, value) {
     		arr2 = newArray(arr.length+1);
     		for (i=0; i<arr.length; i++) {
       			arr2[i] = arr[i];
		}
     		arr2[arr.length] = value;
     		return arr2;
 	}

	// find line function
	// needs start params and direction
	function findLine(x0, y0, x1, y1) {

		// starting guess parameters for line finding
		var lineTop = y0;
		var lineBottom = y1;
		var lineLeft = x0;
		var lineRight = x1;

		var pixels = 20; // number of pixels between centers is about 14

		// direction of movement should be perpendicular to line
		if ( y0 == y1 ) {
			xshift = 0;
			yshift = 1;
		} else {
			xshift = 1;
			yshift = 0;
		}

		// find nearby line with brighest pixel
		var lastMean = 0;
		for (j=0; j<pixels; j++) {
			makeLine(lineLeft+j*xshift, lineBottom+j*yshift, lineRight+j*xshift, lineTop+j*yshift);
			vals = getProfile();
			Array.getStatistics(vals, min, max, mean, stdDev);
			if (mean < lastMean) {
				makeLine(lineLeft+(j-1)*xshift, lineBottom+(j-1)*yshift, lineRight+(j-1)*xshift, lineTop+(j-1)*yshift);
				vals = getProfile();
				break;
			} else {
				lastMean = mean;
			}
		}

		return vals;
	}

	// find sets of peaks function
	// needs array of values from profile, stdDev background, mean background value, expected number of peaks per set, expected number of sets?
	function findPeakSets(vals, stDevBG, meanBG, expectedPeaks) {
		res = newArray;
		var tol = 3*stdDevBG;
		maxima = Array.findMaxima(vals, tol);
		Array.sort(maxima);

		for (i=0; i<maxima.length-expectedPeaks+1; i++) {
			set = Array.slice(maxima, i, i+expectedPeaks);
			if ( amplitudeCheck(vals, set, 3*meanBG) ) {
				lastStats = getStatsFromIndices(vals, set);
				lastStdDev = lastStats[3];
				for (j=i+1; j<maxima.length-expectedPeaks+1; j++) {
					testSet = Array.slice(maxima, j, j+expectedPeaks);
					thisStats = getStatsFromIndices(vals, testSet);
					thisStdDev = thisStats[3];
					if (thisStdDev < lastStdDev) {
						lastStdDev = thisStdDev;
						set = testSet;
					} else {
						for (k=0; k<set.length; k++) {
							res = append(res, set[k]);
						}
						i = j+expectedPeaks-2;
						break;
					}
				}
			}
		}
		return res;
	}

	// amplitude check helper function for find peak sets function
	function amplitudeCheck(vals, indices, threshold) {
		res = true;
		for (i=0; i<indices.length; i++) {
			if ( vals[indices[i]] < threshold ) {
				res = false;
			}
		}
		return res;
	}

	// get stats from indices helper function, used in several places
	function getStatsFromIndices(vals, indices) {
		setValues = newArray;
		for (i=0; i<indices.length; i++) {
			setValues = append(setValues, vals[indices[i]]);
		}
		Array.getStatistics(setValues, min, max, mean, stdDev);
		res = newArray(min, max, mean, stdDev);
		return res;
	}

	// get directory from user
	var dir = getString("This macro takes a file path which is the target directory. It loops through the files in this target directory to perform analysis. Please enter the target directory file path.", "C:/Gener8/GLT/GALT FL Images/16mm lens/vertical rows center");
	if ( !endsWith(dir, "/") ) {
		dir = dir + "/";
	}

	// user selects image type from available options, all images in target directory have to be same style
	Dialog.create("Select Image Type");
	items = newArray("9 sets of 3", "9 sets of 1", "2 columns of 6");
	Dialog.addRadioButtonGroup("Options", items, 3, 1, items[2]);
	Dialog.show;
	imageType = Dialog.getRadioButton();

	// set params based on user image type choice
	if ( imageType == "2 columns of 6") {
			var numLines = 2; // integer value equal to the number of lines that will be drawn for profiles
			lineNames = newArray("Assays", "Known Concentration"); // array of names for these lines for table creation
			linePoints = newArray(2054, 700, 2054, 2300, 2487, 700, 2487, 2300); // array of sets of 4 points for drawing the lines
			backgroundPoints = newArray(1300, 300); // array with sets of start points and lengths of areas to measure background information
			peakNames = newArray("Set 1", "Set 2", "Set 3", "Set 4", "Set 5", "Set 6"); // array with the names of each set in the line
			var expectedPeaks = 5; // expected number of wells in a row with fluorescence
	} else if ( imageType == case "9 sets of 3" ) {
			var numLines = 3;
			lineNames = newArray("Left", "Center", "Right");
			linePoints = newArray();
			backgroundPoints = newArray();
			peakNames = newArray("Bottom 1u"; "Bottom 5u", "Bottom 10u", "Middle 1u"; "Middle 5u", "Middle 10u", "Top 1u"; "Top 5u", "Top 10u");
			var expectedPeaks = 5;
	} else if ( imageType == case "9 sets of 1" ) {
			var numLines = 3;
			lineNames = newArray("Left", "Center", "Right");
			linePoints = newArray();
			backgroundPoints = newArray();
			peakNames = newArray("Bottom 1u"; "Bottom 5u", "Bottom 10u", "Middle 1u"; "Middle 5u", "Middle 10u", "Top 1u"; "Top 5u", "Top 10u");
			var expectedPeaks = 3;
	} else {
			var numLines = 2;
			lineNames = newArray("Assays", "Known Concentration");
			linePoints = newArray(2054, 700, 2054, 2300, 2487, 700, 2487, 2300);
			backgroundPoints = newArray(1300, 300);
			peakNames = newArray("Set 1", "Set 2", "Set 3", "Set 4", "Set 5", "Set 6");
			var expectedPeaks = 5;
	}

	// create table to store data
	Table.create("Fluorescence");

	// check if the entered path is a directory before entering main loop
	if (File.isDirectory(dir)) {

		files = getFileList(dir); // get array of files

		// loop through files
		for (i=0; i<files.length; i++) {

			// open file
			var filename = files[i];
			var pth = dir + filename;
			var currIndex = indexOf(filename, "A")-1;
			var current = substring(filename, currIndex, currIndex+1);
			var lensIndex = indexOf(filename, "mm")-2;
			var lens = substring(filename, lensIndex, lensIndex+2);
			var expIndex = indexOf(filename, "sec")-1;
			var exposure = substring(filename, expIndex, expIndex+1);

			// loop through lines
			for (line=0; line<numLines; line++) {
				open(pth); // open the image so it is active
				// create entry in table
				var entryLine = i*numLines + line;
				Table.set("File Name", entryLine, filename);
				Table.set("LED Current", entryLine, current);
				Table.set("Lens Focal Length (mm)", entryLine, lens);
				Table.set("Exposure Time (sec)", entryLine, exposure);
				Table.set("Line", entryLine, lineNames[line]);

				// find line and get statistics
				vals = findLine(linePoints[line*4], linePoints[line*4+1], linePoints[line*4+2], linePoints[line*4+3]);
				Array.getStatistics(vals, min, max, mean, stdDev);

				// show line profile
				Plot.create("Profile " + filename, "Row", "Intensity", vals);
				Plot.show();

				// characterize background and noise
				var length = vals.length;
				background = Array.slice(vals, length-300, length); // probably want this to be different depending on which image we are looking at
				Array.getStatistics(background, minBG, maxBG, meanBG, stdDevBG);
				Table.set("Mean Background", entryLine, meanBG);
				Table.set("Background Standard Deviation", entryLine, stdDevBG);

				// find peak sets
				sets = findPeakSets(vals, stdDevBG, meanBG, expectedPeaks);

				// characterize sets
				for (j=0; j<sets.length/expectedPeaks; j++) {
					var start = j*expectedPeaks;
					var end = start + expectedPeaks;
					indices = Array.slice(sets, start, end);
					setStats = getStatsFromIndices(vals, indices);
					var setMin = setStats[0];
					var setMax = setStats[1];
					var setMean = setStats[2];
					var setStdDev = setStats[3];
					Table.set("Mean Signal " + peakNames[j], entryLine, setMean-meanBG);
					//Table.set("Set " + j + " Min", i, setMin);
					//Table.set("Set " + j + " Max", i, setMax);
				}

				// let user look before closing
				//Dialog.create("Continue?");
				//Dialog.show();
				waitForUser;
				close(filename);
			}

		}
		Table.update;
	} else {
		waitForUser("Error: Not a valid directory entry.", "It appears the file path you've entered is not recognized as a directory. Please check your file path and run this macro again.");
	}
}
