macro "GALT [a]" {

	// append function
	function append(arr, value) {
     		arr2 = newArray(arr.length+1);
     		for (i=0; i<arr.length; i++) {
       			arr2[i] = arr[i];
		}
     		arr2[arr.length] = value;
     		return arr2;
 	}

	// find line function
	// needs start params and direction
	function findLine(x0, y0, x1, y1) {

		// starting guess parameters for line finding
		var lineTop = y0;
		var lineBottom = y1;
		var lineLeft = x0;
		var lineRight = x1;

		var pixels = 20; // number of pixels between centers is about 14

		// direction of movement should be perpendicular to line
		if ( y0 == y1 ) {
			xshift = 0;
			yshift = 1;
		} else {
			xshift = 1;
			yshift = 0;
		}

		// find nearby line with brighest pixel
		var lastMax = 0;
		for (j=0; j<pixels; j++) {
			makeLine(lineLeft+j*xshift, lineBottom+j*yshift, lineRight+j*xshift, lineTop+j*yshift);
			vals = getProfile();
			Array.getStatistics(vals, min, max, mean, stdDev);
			if (max < lastMax) {
				makeLine(lineLeft+(j-1)*xshift, lineBottom+(j-1)*yshift, lineRight+(j-1)*xshift, lineTop+(j-1)*yshift);
				vals = getProfile();
				break;
			} else {
				lastMax = max;
			}
		}

		return vals;
	}

	// find sets of peaks function
	// needs array of values from profile, stdDev background, mean background value, expected number of peaks per set, expected number of sets?
	function findPeakSets(vals, stDevBG, meanBG, expectedPeaks) {
		res = newArray;
		var tol = 3*stdDevBG;
		maxima = Array.findMaxima(vals, tol);
		Array.sort(maxima);
		
		for (i=0; i<maxima.length-expectedPeaks+1; i++) {
			set = Array.slice(maxima, i, i+expectedPeaks);
			if ( amplitudeCheck(vals, set, 3*meanBG) ) {
				lastStats = getStatsFromIndices(vals, set);
				lastStdDev = lastStats[3];
				for (j=i+1; j<maxima.length-expectedPeaks+1; j++) {
					testSet = Array.slice(maxima, j, j+expectedPeaks);
					thisStats = getStatsFromIndices(vals, testSet);
					thisStdDev = thisStats[3];
					if (thisStdDev < lastStdDev) {
						lastStdDev = thisStdDev;
						set = testSet;
					} else {
						for (k=0; k<set.length; k++) {
							res = append(res, set[k]);
						}
						i = j+expectedPeaks-2;
						break;
					}
				}
			}			
		}
		return res;
	}

	// amplitude check helper function for find peak sets function
	function amplitudeCheck(vals, indices, threshold) {
		res = true;
		for (i=0; i<indices.length; i++) {
			if ( vals[indices[i]] < threshold ) {
				res = false;
			}
		}
		return res;
	}

	// get stats from indices helper function, used in several places
	function getStatsFromIndices(vals, indices) {
		setValues = newArray;
		for (i=0; i<indices.length; i++) {
			setValues = append(setValues, vals[indices[i]]);
		}
		Array.getStatistics(setValues, min, max, mean, stdDev);
		res = newArray(min, max, mean, stdDev);
		return res;
	}

	// get directory from user
	var dir = getString("This macro takes a file path which is the target directory. It loops through the files in this target directory to perform analysis. Please enter the target directory file path.", "C:/Gener8/GLT/GALT FL Images/16mm lens/vertical rows center");
	if ( !endsWith(dir, "/") ) {
		dir = dir + "/";
	}

	// get images type from user
	// switch case here to set params
	// lines to draw (names of these lines)
	// which direction they should go
	// expected profile information
	// expected peaks
	var expectedPeaks = 5;

	// create table to store data
	Table.create("Fluorescence");

	// check if the entered path is a directory before entering main loop
	if (File.isDirectory(dir)) {

		files = getFileList(dir); // get array of files
		Table.setColumn("File Name", files);

		// loop through files
		for (i=0; i<files.length; i++) {

			// open file
			var filename = files[i];
			var pth = dir + filename;
			open(pth);

			// need to add loop on the rest of this stuff for line making

			// find line and get statistics
			vals = findLine(2487, 700, 2487, 2300);
			Array.getStatistics(vals, min, max, mean, stdDev);

			// show line profile
			Plot.create("Profile " + filename, "Row", "Intensity", vals);
			Plot.show();

			// characterize background and noise
			var length = vals.length;
			background = Array.slice(vals, length-300, length); // probably want this to be different depending on which image we are looking at
			Array.getStatistics(background, minBG, maxBG, meanBG, stdDevBG);
			Table.set("Mean Background", i, meanBG);
			Table.set("Background Standard Deviation", i, stdDevBG);

			// find peak sets
			sets = findPeakSets(vals, stdDevBG, meanBG, expectedPeaks);

			// characterize sets
			for (j=0; j<sets.length/expectedPeaks; j++) {
				var start = j*expectedPeaks;
				var end = start + expectedPeaks;
				indices = Array.slice(sets, start, end);
				setStats = getStatsFromIndices(vals, indices);
				var setMin = setStats[0];
				var setMax = setStats[1];
				var setMean = setStats[2];
				var setStdDev = setStats[3];
				Table.set("Set " + j + " Mean", i, setMean);
				//Table.set("Set " + j + " Min", i, setMin);
				//Table.set("Set " + j + " Max", i, setMax);
			}

			// let user look before closing
			Dialog.create("Continue?");
			Dialog.show();
			close(filename);
		}
		Table.update;
	} else {
		waitForUser("Error: Not a valid directory entry.", "It appears the file path you've entered is not recognized as a directory. Please check your file path and run this macro again.");
	}
}
