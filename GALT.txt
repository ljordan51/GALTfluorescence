macro "GALT [a]" {

	// append function
	function append(arr, value) {
     		arr2 = newArray(arr.length+1);
     		for (i=0; i<arr.length; i++) {
       			arr2[i] = arr[i];
		}
     		arr2[arr.length] = value;
     		return arr2;
 	}

	// find line function
	// needs start params and direction
	function findLine(x0, y0, x1, y1, searchPixels) {

		// starting guess parameters for line finding
		var lineTop = y0;
		var lineBottom = y1;
		var lineLeft = x0;
		var lineRight = x1;

		var pixels = searchPixels; // number of pixels between centers is about 14

		// direction of movement should be perpendicular to line
		if ( y0 == y1 ) {
			xshift = 0;
			yshift = 1;
		} else {
			xshift = 1;
			yshift = 0;
		}

		// find nearby line with brighest pixel
		var bestCentered = 0;
		var bestJ = 0;
		for (j=0; j<pixels; j++) {
			makeLine(lineLeft+j*xshift, lineBottom+j*yshift, lineRight+j*xshift, lineTop+j*yshift);
			//waitForUser;
			vals = getProfile();
			Array.getStatistics(vals, min, max, mean, stdDev);
			howCentered = mean;
			//print(howCentered);
			if (howCentered > bestCentered) {
				bestJ = j;
				bestCentered = howCentered;
			}
		}

		//print(bestJ);
		makeLine(lineLeft+bestJ*xshift, lineBottom+bestJ*yshift, lineRight+bestJ*xshift, lineTop+bestJ*yshift);
		vals = getProfile();

		return vals;
	}

	// find sets of peaks function
	function findPeakSets(vals, stDevBG, meanBG, firstSetStart, firstSetEnd, expectedSets, expectedPeaks, pixBtwSets, maxIndexRange) {
		res = newArray;
		var tol = 3*stdDevBG;
		var minThresholdStdDevMultiplier = 3;
		var startThresholdStdDevMultiplier = 20;
		var threshold = meanBG+startThresholdStdDevMultiplier*stdDevBG;
		//print(threshold);
		maxima = Array.findMaxima(vals, tol);
		if (maxima.length < expectedPeaks) {
			return res;
		}
		Array.sort(maxima);
		//Array.print(maxima);
		//print(firstSetStart);
		//print(firstSetEnd);

		for (j=0; j<startThresholdStdDevMultiplier-minThresholdStdDevMultiplier+1; j++) {
			//print(threshold-j*stdDevBG);
			set = findSet(vals, maxima, firstSetStart, firstSetEnd, expectedPeaks, threshold-j*stdDevBG, maxIndexRange);
			if (set.length > 0) {
				break;
			}
		}

		for (k=0; k<set.length; k++) {
			res = append(res, set[k]);
		}
		//print("found first set");
		//Array.print(res);

		if (res.length > 0) {
			lastSetStartIndex = res[0];
			for (i=1; i<expectedSets; i++) {
				//print(lastSetStartIndex);
				nextSetStartIndex = lastSetStartIndex+pixBtwSets[i-1]-2*pixBtwWellCenters;
				//print(nextSetStartIndex);
				for (j=0; j<startThresholdStdDevMultiplier-minThresholdStdDevMultiplier+1; j++) {
					//print(threshold-j*stdDevBG);
					//print(stdDevBG);
					set = findSet(vals, maxima, nextSetStartIndex, nextSetStartIndex+maxIndexRange+3*pixBtwWellCenters, expectedPeaks, threshold-j*stdDevBG, maxIndexRange);
					if (set.length > 0) {
						//Array.print(set);
						break;
					}
				}
				for (k=0; k<set.length; k++) {
					res = append(res, set[k]);
				}
				if (set.length > 0) {
					lastSetStartIndex = set[0];
				} else {
					lastSetStartIndex = nextSetStartIndex;
				}

			}
		}

		return res;
	}

	function findSet(vals, maxima, setStart, lastIndexToCheck, expectedPeaks, threshold, maxIndexRange) {
		res = newArray;
		for (i=0; i<maxima.length-expectedPeaks+1; i++) {
			if ( (maxima[i] >= setStart) && (maxima[i+expectedPeaks-1] <= lastIndexToCheck) ) { // skip unless index is greater than expected first possible start index
				set = Array.slice(maxima, i, i+expectedPeaks);
				if ( amplitudeCheck(vals, set, threshold) && indexRangeCheck(set, maxIndexRange) ) {
					//print("found good set");
					//Array.print(set);
					res = findBestSet(vals, set, maxima, expectedPeaks, i, threshold, maxIndexRange);
					break; // leave after finding first set
				}
			}
		}
		return res;
	}

	function findBestSet(vals, set, maxima, expectedPeaks, i, threshold, maxIndexRange) {
		firstPeak = set[0];
		lastStats = getStatsFromIndices(vals, set);
		lastStdDev = lastStats[3];
		for (j=i+1; j<maxima.length-expectedPeaks+1; j++) {
			testSet = Array.slice(maxima, j, j+expectedPeaks);
			if ( testSet[0] > firstPeak + 4*pixBtwWellCenters ) {
				break;
			}
			thisStats = getStatsFromIndices(vals, testSet);
			thisStdDev = thisStats[3];
			if ( (thisStdDev < lastStdDev) && amplitudeCheck(vals, testSet, threshold) && indexRangeCheck(testSet, maxIndexRange) ) {
				lastStdDev = thisStdDev;
				set = testSet;
			} else {
				break;
			}
		}
		return set;
	}

	function indexRangeCheck(indices, maxRange) {
		Array.getStatistics(indices, min, max, mean, stdDev);
		return (maxRange > (max-min));
	}

	// amplitude check helper function for find peak sets function
	function amplitudeCheck(vals, indices, threshold) {
		res = true;
		for (i=0; i<indices.length; i++) {
			if ( vals[indices[i]] < threshold ) {
				res = false;
			}
		}
		return res;
	}

	// get stats from indices helper function, used in several places
	function getStatsFromIndices(vals, indices) {
		setValues = newArray;
		for (i=0; i<indices.length; i++) {
			setValues = append(setValues, vals[indices[i]]);
		}
		Array.getStatistics(setValues, min, max, mean, stdDev);
		res = newArray(min, max, mean, stdDev);
		return res;
	}

	// get directory from user
	var dir = getString("This macro takes a file path which is the target directory. It loops through the files in this target directory to perform analysis. Please enter the target directory file path.", "C:/Gener8/GLT/GALT FL Images/2x6");
	if ( !endsWith(dir, "/") ) {
		dir = dir + "/";
	}

	// user selects image type from available options, all images in target directory have to be same style
	Dialog.create("Select Image Type");
	items = newArray("9 sets of 3", "9 sets of 1", "2 columns of 6");
	Dialog.addRadioButtonGroup("Options", items, 3, 1, items[2]);
	Dialog.show;
	imageType = Dialog.getRadioButton();

	// set params based on user image type choice
	if ( imageType == "2 columns of 6") {
			lineNames = newArray("Assays", "Known Concentration"); // array of names for these lines for table creation
			linePoints = newArray(1980, 700, 1980, 2300,
														2400, 700, 2400, 2300); // array of sets of 4 points for drawing the lines
			backgroundPoints = newArray(1300, 300); // array with sets of start points and lengths of areas to measure background information
			peakNames = newArray("10u", "5u", "1u", "500n", "100n", "50n"); // array with the names of each set in the line
			var expectedSets = 6; // expected number of sets of fluorescent wells
			var expectedPeaks = 5; // expected number of wells in a row with same fluorescence concentration
			var pixBtwSets = newArray(140, 140, 140, 140, 140); // minimum number of pixels expected to be seen between any two sets
			var firstSetStart = 200; // first index to expect a well in the first set could be in
			var firstSetEnd = 470; // last index expected to see a well in the first set
			var searchPixels = 20; // number of pixels to search through for line finding
			var maxIndexRange = 84; // number of pixels that the set of peaks should range at maximum
	} else if ( imageType == "9 sets of 3" ) {
			lineNames = newArray("Left Top", "Left Middle", "Left Bottom", "Center Top", "Center Middle", "Center Bottom", "Right Top", "Right Middle", "Right Bottom");
			linePoints = newArray(508, 531, 508, 1254,
														508, 1254, 508, 1977,
														508, 1977, 508, 2700,
														2123, 531, 2123, 1254,
														2123, 1254, 2123, 1977,
														2123, 1977, 2123, 2700,
														3820, 531, 3820, 1254,
														3820, 1254, 3820, 1977,
														3820, 1977, 3820, 2700);
			backgroundPoints = newArray(0, 75, 645, 75);
			peakNames = newArray("1u", "5u", "10u");
			var expectedSets = 3;
			var expectedPeaks = 5;
			var pixBtwSets = newArray(112, 112);
			var firstSetStart = 100;
			var firstSetEnd = 310;
			var searchPixels = 300;
			var maxIndexRange = 84;
	} else if ( imageType == "9 sets of 1" ) {
			lineNames = newArray("Left Top", "Left Middle", "Left Bottom", "Center Top", "Center Middle", "Center Bottom", "Right Top", "Right Middle", "Right Bottom");
			linePoints = newArray(610, 507, 610, 1035,
														610, 1368, 610, 1896,
														610, 2202, 610, 2729,
														2285, 507, 2285, 1035,
														2285, 1368, 2285, 1896,
														2285, 2202, 2285, 2729,
														3644, 507, 3644, 1035,
														3644, 1368, 3644, 1896,
														3644, 2202, 3644, 2729);
			backgroundPoints = newArray(0, 100, 400, 100);
			peakNames = newArray("1u");
			var expectedSets = 1;
			var expectedPeaks = 3;
			var pixBtwSets = newArray(0);
			var firstSetStart = 100;
			var firstSetEnd = 375;
			var searchPixels = 300;
			var maxIndexRange = 56;
	} else {
		lineNames = newArray("Assays", "Known Concentration");
		linePoints = newArray(1980, 700, 1980, 2300,
													2400, 700, 2400, 2300);
		backgroundPoints = newArray(1300, 300);
		peakNames = newArray("10u", "5u", "1u", "500n", "100n", "50n");
		var expectedSets = 6;
		var expectedPeaks = 5;
		var pixBtwSets = newArray(140, 140, 140, 140, 140);
		var firstSetStart = 200;
		var firstSetEnd = 470;
		var searchPixels = 20;
		var maxIndexRange = 84;
	}

	// create table to store data
	//Table.create("Fluorescence");

	// global pixels between well centers
	var pixBtwWellCenters = 14;

	// check if the entered path is a directory before entering main loop
	if (File.isDirectory(dir)) {

		files = getFileList(dir); // get array of files

		// loop through files
		for (i=0; i<files.length; i++) {

			// open file
			var filename = files[i];
			var pth = dir + filename;
			var currIndex = indexOf(filename, "A")-1;
			var current = substring(filename, currIndex, currIndex+1);
			var lensIndex = indexOf(filename, "mm")-2;
			var lens = substring(filename, lensIndex, lensIndex+2);
			var expIndex = indexOf(filename, "sec")-1;
			var exposure = substring(filename, expIndex, expIndex+1);
			var numLines = linePoints.length/4;

			// loop through lines
			for (line=0; line<numLines; line++) {
				open(pth); // open the image so it is active
				// create entry in table
				var entryLine = i*numLines + line;
				Table.set("File Name", entryLine, filename);
				Table.set("LED Current", entryLine, current);
				Table.set("Lens Focal Length (mm)", entryLine, lens);
				Table.set("Exposure Time (sec)", entryLine, exposure);
				Table.set("Line", entryLine, lineNames[line]);

				// find line and get statistics
				vals = findLine(linePoints[line*4], linePoints[line*4+1], linePoints[line*4+2], linePoints[line*4+3], searchPixels);
				Array.getStatistics(vals, min, max, mean, stdDev);

				// show line profile
				//Plot.create("Profile " + filename + lineNames[line], "Row", "Intensity", vals);
				//Plot.show();
				close(filename);

				// characterize background and noise
				var length = vals.length;
				background = Array.slice(vals, backgroundPoints[0], backgroundPoints[0]+backgroundPoints[1]); // probably want this to be different depending on which image we are looking at
				Array.getStatistics(background, minBG, maxBG, meanBG, stdDevBG);
				Table.set("Mean Background", entryLine, meanBG);
				Table.set("Background Standard Deviation", entryLine, stdDevBG);

				// find peak sets
				sets = findPeakSets(vals, stdDevBG, meanBG, firstSetStart, firstSetEnd, expectedSets, expectedPeaks, pixBtwSets, maxIndexRange);
				//Array.print(sets);
				var setsFound = sets.length/expectedPeaks;
				Table.set("Sets Found", entryLine, setsFound);

				// characterize sets
				for (j=0; j<setsFound; j++) {
					var start = j*expectedPeaks;
					var end = start + expectedPeaks;
					indices = Array.slice(sets, start, end);
					Array.getStatistics(indices, indexMin, indexMax, indexMean, indexStdDev);
					setStats = getStatsFromIndices(vals, indices);
					var setMin = setStats[0];
					var setMax = setStats[1];
					var setMean = setStats[2];
					var setStdDev = setStats[3];
					if (j > peakNames.length-1) {
						peakName = "Set " + j+1;
					} else {
						peakName = peakNames[j];
					}
					//Table.set("Max Index " + peakName, entryLine, indexMax);
					//Table.set("Min Index " + peakName, entryLine, indexMin);
					var signal = setMean-meanBG;
					Table.set("Mean Signal " + peakName, entryLine, signal);
					Table.set("Signal to Noise Ratio " + peakName, entryLine, signal/(3*stdDevBG));
					if (j > 0) {
						Table.set("Start to Start Distance From Last Set " + peakName, entryLine, indices[0]-lastStartIndex);
						lastStartIndex = indices[0];
					} else {
						lastStartIndex = indices[0];
					}
					//Table.set("Set " + j + " Min", i, setMin);
					//Table.set("Set " + j + " Max", i, setMax);
				}

				// let user look before closing
				//Dialog.create("Continue?");
				//Dialog.show();
				//waitForUser;
				//close(filename);
			}

		}
		Table.update;
	} else {
		waitForUser("Error: Not a valid directory entry.", "It appears the file path you've entered is not recognized as a directory. Please check your file path and run this macro again.");
	}
}
